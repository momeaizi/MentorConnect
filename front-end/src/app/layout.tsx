'use client'

// import type { Metadata } from "next";
import localFont from "next/font/local";
import { ConfigProvider } from 'antd';
import "./globals.css";
import { AuthProvider } from "@/context/AuthContext";
import ProtectedRoute from "@/components/ProtectedRoute";
import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import useStore from "@/lib/store";
import Toast from "@/components/Toast";


const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [toastData, setToastData] = useState(null);
  const {setNumberOfNotif, setNewNotif, numberOfNotif} = useStore();

  useEffect(() => {
    const socket = io('http://localhost:5000', { transports: ['websocket'] });
    
    socket.on('connect', () => {
      console.log('WebSocket connected');
      useStore.getState().setSocket(socket);
    });

    socket.on('new_notification', (data:any) => {
      setNumberOfNotif(1);
      setNewNotif(data);

    });

    socket.on('disconnect', () => {
      console.log('WebSocket disconnected');
      useStore.getState().setSocket(null);
    });

    return () => {
      socket.disconnect();
    };
  }, []);

  useEffect(()=>{
    setToastData({
      toastType:"info",
      notifType:"notification"
    });
    setTimeout(()=>{setToastData(null)}, 2000);
  },[numberOfNotif])

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased overflow-hidden	`}
      >
        <ConfigProvider
            theme={{
              token: {
                colorBgBase: '#021428',
                colorPrimary: '#232735', //1677ff
                colorSecondary: '#ff6f61',
                colorBorder: '#323333',
                colorTextBase: '#ffffff',
                colorBgHover: '#333333',
                colorBorderHover: '#555555',
                colorBgActive: '#444444',
                colorBorderActive: '#777777',
                colorPrimaryHover: '#777777',
                colorPrimaryActive: '#0e5adb',
                colorErrorBg: '#021428',
                colorErrorBorder: '#ff4d4f',
                colorErrorText: '#ff4d4f',
                hoverBg: '#444444',
                // taha
                // colorPrimary: '#ec4899',
                // colorSecondary: '#ef4444',
                // colorBgBase: '#1a1b27',
                // colorBorder: "#70707B",
                colorText: "#FAFAFA",
                colorTextPlaceholder: "#70707B",
                colorBorderSecondary:"#3F3F46",
                colorIcon: '#70707B'
              },
          }}
        >
          {toastData && (
            <Toast
              toastType={toastData.toastType}
              notifType={toastData.notifType}
            />
          )}
          <AuthProvider>
            <ProtectedRoute>
              {children}
            </ProtectedRoute>
          </AuthProvider>
        </ConfigProvider>
      </body>
    </html>
  );
}
