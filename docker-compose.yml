services:
  mc-postgres:
    container_name: mc-postgres
    image: postgres
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - pgdata_vol:/var/lib/postgresql/data
    networks:
      - internal_network


  mc-redis:
    container_name: mc-redis
    image: redis:latest
    restart: always
    networks:
      - internal_network


  mc-api:
    container_name: mc-api
    image: mc-api:latest
    build: ./mc-api
    restart: always
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - REDIS_URL=${REDIS_URL}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY}
    ports:
      - "5000:5000"
    depends_on:
      - mc-postgres
      - mc-redis
    networks:
      - internal_network
    volumes:
      - ./mc-api:/mc-api


  # nginx:
  #   container_name: nginx
  #   image: nginx:latest
  #   restart: always
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   ports:
  #     - "5000:80"
  #   depends_on:
  #     - mc-api
  #   networks:
  #     - internal_network

  # front-end:
  #   container_name: front-end
  #   image: front-end:latest
  #   build: ./front-end
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - mc-api
  #   networks:
  #     - internal_network
  #   volumes:
  #     - ./front-end/src:/app/src

  mc-ui:
    container_name: mc-ui
    image: mc-ui:latest
    build: ./mc-ui
    ports:
      - "3000:3000"
    depends_on:
      - mc-api
    networks:
      - internal_network
    volumes:
      - ./mc-ui/src:/app/src

networks:
  internal_network:

volumes:
  pgdata_vol:
